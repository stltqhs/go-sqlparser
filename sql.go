// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	sample            *Sample
	format            *FormatType
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const SAMPLE = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const FORMAT = 57363
const ALL = 57364
const DISTINCT = 57365
const AS = 57366
const EXISTS = 57367
const ASC = 57368
const DESC = 57369
const INTO = 57370
const DUPLICATE = 57371
const KEY = 57372
const DEFAULT = 57373
const SET = 57374
const LOCK = 57375
const KEYS = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const SCHEMA = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const UNIQUE = 57452
const PRIMARY = 57453
const COLUMN = 57454
const CONSTRAINT = 57455
const SPATIAL = 57456
const FULLTEXT = 57457
const FOREIGN = 57458
const KEY_BLOCK_SIZE = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const BEGIN = 57479
const START = 57480
const TRANSACTION = 57481
const COMMIT = 57482
const ROLLBACK = 57483
const BIT = 57484
const TINYINT = 57485
const SMALLINT = 57486
const MEDIUMINT = 57487
const INT = 57488
const INTEGER = 57489
const BIGINT = 57490
const INTNUM = 57491
const REAL = 57492
const DOUBLE = 57493
const FLOAT_TYPE = 57494
const DECIMAL = 57495
const NUMERIC = 57496
const TIME = 57497
const TIMESTAMP = 57498
const DATETIME = 57499
const YEAR = 57500
const CHAR = 57501
const VARCHAR = 57502
const BOOL = 57503
const CHARACTER = 57504
const VARBINARY = 57505
const NCHAR = 57506
const TEXT = 57507
const TINYTEXT = 57508
const MEDIUMTEXT = 57509
const LONGTEXT = 57510
const BLOB = 57511
const TINYBLOB = 57512
const MEDIUMBLOB = 57513
const LONGBLOB = 57514
const JSON = 57515
const ENUM = 57516
const GEOMETRY = 57517
const POINT = 57518
const LINESTRING = 57519
const POLYGON = 57520
const GEOMETRYCOLLECTION = 57521
const MULTIPOINT = 57522
const MULTILINESTRING = 57523
const MULTIPOLYGON = 57524
const NULLX = 57525
const AUTO_INCREMENT = 57526
const APPROXNUM = 57527
const SIGNED = 57528
const UNSIGNED = 57529
const ZEROFILL = 57530
const DATABASES = 57531
const TABLES = 57532
const VITESS_KEYSPACES = 57533
const VITESS_SHARDS = 57534
const VITESS_TABLETS = 57535
const VSCHEMA_TABLES = 57536
const NAMES = 57537
const CHARSET = 57538
const GLOBAL = 57539
const SESSION = 57540
const CURRENT_TIMESTAMP = 57541
const DATABASE = 57542
const CURRENT_DATE = 57543
const CURRENT_TIME = 57544
const LOCALTIME = 57545
const LOCALTIMESTAMP = 57546
const UTC_DATE = 57547
const UTC_TIME = 57548
const UTC_TIMESTAMP = 57549
const REPLACE = 57550
const CONVERT = 57551
const CAST = 57552
const SUBSTR = 57553
const SUBSTRING = 57554
const GROUP_CONCAT = 57555
const SEPARATOR = 57556
const MATCH = 57557
const AGAINST = 57558
const BOOLEAN = 57559
const LANGUAGE = 57560
const WITH = 57561
const QUERY = 57562
const EXPANSION = 57563
const UNUSED = 57564

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"SAMPLE",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"FORMAT",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 228,
	111, 567,
	-2, 563,
	-1, 229,
	111, 568,
	-2, 564,
	-1, 297,
	82, 722,
	-2, 47,
	-1, 298,
	82, 688,
	-2, 48,
	-1, 303,
	82, 673,
	-2, 529,
	-1, 305,
	82, 707,
	-2, 531,
	-1, 565,
	54, 41,
	56, 41,
	-2, 43,
	-1, 692,
	111, 570,
	-2, 566,
	-1, 888,
	5, 28,
	-2, 372,
	-1, 913,
	5, 27,
	-2, 505,
	-1, 1123,
	5, 28,
	-2, 506,
	-1, 1167,
	5, 27,
	-2, 508,
	-1, 1229,
	5, 28,
	-2, 509,
}

const yyPrivate = 57344

const yyLast = 9662

var yyAct = [...]int{
	259, 47, 1219, 832, 631, 1178, 512, 233, 754, 772,
	258, 1035, 1060, 1036, 916, 788, 1032, 826, 1129, 787,
	969, 932, 557, 559, 755, 717, 880, 302, 201, 727,
	207, 960, 1009, 972, 511, 3, 921, 694, 53, 743,
	445, 724, 798, 451, 822, 296, 401, 561, 47, 784,
	284, 546, 457, 751, 231, 862, 212, 465, 216, 292,
	294, 52, 289, 812, 1251, 1241, 1249, 1227, 1247, 833,
	1240, 1226, 202, 203, 204, 205, 1027, 1117, 405, 1066,
	1067, 1068, 206, 1187, 283, 57, 951, 1071, 1069, 220,
	805, 1141, 813, 426, 285, 172, 168, 169, 170, 1010,
	1106, 1104, 200, 1156, 437, 438, 1248, 222, 1246, 526,
	59, 60, 61, 62, 63, 414, 1220, 993, 752, 1179,
	1185, 415, 849, 408, 773, 775, 165, 166, 166, 1012,
	639, 630, 1181, 931, 930, 800, 929, 848, 800, 1201,
	478, 477, 487, 488, 480, 481, 482, 483, 484, 485,
	486, 479, 403, 411, 489, 180, 428, 167, 430, 1206,
	1126, 1014, 996, 1018, 853, 1013, 945, 1011, 501, 502,
	896, 874, 1016, 847, 229, 666, 785, 469, 421, 1075,
	663, 1015, 489, 427, 429, 432, 432, 432, 432, 464,
	432, 432, 171, 1211, 1017, 1019, 990, 432, 774, 1180,
	479, 1085, 992, 489, 462, 76, 919, 573, 1029, 177,
	744, 980, 177, 47, 802, 463, 462, 1186, 1184, 803,
	464, 844, 841, 842, 813, 840, 800, 799, 498, 1076,
	799, 500, 464, 634, 949, 1070, 177, 177, 76, 978,
	1214, 459, 177, 443, 76, 1231, 744, 454, 903, 453,
	851, 854, 425, 1147, 402, 1225, 1146, 1232, 510, 50,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 697,
	525, 527, 527, 527, 527, 527, 527, 527, 527, 535,
	536, 537, 538, 1202, 964, 846, 417, 418, 419, 963,
	558, 669, 670, 718, 991, 719, 989, 407, 952, 455,
	1212, 980, 1163, 979, 665, 701, 1144, 845, 984, 981,
	974, 975, 982, 977, 976, 961, 448, 452, 799, 699,
	700, 698, 1209, 797, 795, 983, 1063, 796, 892, 978,
	891, 986, 850, 470, 1235, 444, 444, 463, 462, 1062,
	177, 664, 177, 893, 946, 852, 463, 462, 177, 937,
	164, 566, 1171, 1217, 464, 177, 572, 463, 462, 76,
	76, 76, 76, 464, 76, 76, 835, 513, 720, 409,
	410, 76, 463, 462, 464, 645, 524, 1171, 444, 1031,
	806, 528, 529, 530, 531, 532, 533, 534, 644, 464,
	635, 463, 462, 979, 871, 872, 873, 76, 984, 981,
	974, 975, 982, 977, 976, 432, 1171, 1172, 464, 633,
	226, 282, 628, 432, 423, 983, 416, 684, 686, 687,
	402, 973, 685, 1191, 432, 432, 432, 432, 432, 432,
	432, 432, 1138, 1137, 1054, 444, 1125, 444, 432, 432,
	480, 481, 482, 483, 484, 485, 486, 479, 1190, 648,
	489, 482, 483, 484, 485, 486, 479, 177, 1072, 489,
	1082, 1081, 1078, 1079, 177, 177, 177, 1078, 1077, 729,
	76, 886, 444, 543, 444, 76, 918, 646, 729, 444,
	580, 579, 1004, 695, 671, 478, 477, 487, 488, 480,
	481, 482, 483, 484, 485, 486, 479, 692, 569, 489,
	54, 47, 478, 477, 487, 488, 480, 481, 482, 483,
	484, 485, 486, 479, 673, 514, 489, 1033, 542, 543,
	917, 726, 999, 23, 688, 690, 918, 736, 739, 898,
	917, 881, 895, 745, 23, 779, 1121, 568, 543, 23,
	886, 570, 543, 568, 289, 289, 289, 289, 289, 731,
	756, 1084, 1166, 1080, 938, 886, 721, 722, 571, 558,
	911, 776, 667, 912, 21, 213, 632, 886, 289, 917,
	681, 682, 50, 830, 897, 741, 1065, 894, 748, 76,
	50, 1151, 807, 50, 827, 177, 177, 76, 50, 177,
	780, 1048, 177, 731, 757, 941, 177, 760, 76, 76,
	76, 76, 76, 76, 76, 76, 769, 922, 923, 679,
	777, 823, 76, 76, 50, 818, 177, 782, 433, 778,
	211, 817, 513, 65, 1033, 734, 735, 792, 965, 928,
	925, 76, 642, 441, 432, 177, 432, 257, 766, 758,
	759, 76, 761, 767, 432, 828, 927, 503, 504, 505,
	506, 507, 508, 509, 763, 762, 1245, 814, 815, 816,
	548, 551, 552, 553, 549, 1239, 550, 554, 74, 824,
	825, 487, 488, 480, 481, 482, 483, 484, 485, 486,
	479, 783, 299, 489, 76, 995, 248, 247, 250, 251,
	252, 253, 875, 956, 692, 249, 254, 764, 672, 217,
	218, 301, 765, 768, 859, 552, 553, 406, 1244, 695,
	458, 863, 864, 869, 868, 177, 446, 578, 177, 177,
	177, 177, 177, 424, 456, 948, 458, 1216, 1215, 447,
	177, 1164, 942, 177, 1119, 1152, 876, 177, 837, 641,
	556, 867, 177, 177, 214, 215, 76, 661, 54, 208,
	866, 235, 914, 915, 76, 728, 730, 477, 487, 488,
	480, 481, 482, 483, 484, 485, 486, 479, 1223, 858,
	489, 746, 860, 861, 209, 452, 1222, 1195, 918, 1094,
	289, 460, 902, 1203, 1142, 662, 913, 56, 58, 567,
	51, 1, 834, 934, 968, 936, 843, 926, 1218, 1177,
	1059, 771, 935, 939, 794, 177, 786, 400, 76, 64,
	76, 1210, 793, 288, 177, 1183, 1140, 177, 76, 801,
	950, 804, 301, 301, 301, 301, 1064, 301, 301, 1213,
	947, 585, 432, 583, 301, 584, 582, 887, 587, 943,
	944, 586, 581, 188, 295, 555, 574, 829, 461, 66,
	962, 988, 904, 987, 839, 497, 865, 432, 300, 1040,
	467, 660, 955, 1093, 957, 958, 959, 668, 971, 450,
	1221, 1194, 953, 954, 901, 985, 523, 742, 234, 683,
	246, 243, 693, 245, 244, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	674, 910, 471, 232, 1003, 224, 287, 539, 547, 545,
	544, 924, 431, 1038, 299, 47, 1008, 1002, 1020, 756,
	1034, 920, 286, 1037, 692, 756, 1021, 998, 1116, 1200,
	1050, 1051, 1052, 301, 678, 25, 55, 1042, 575, 1028,
	219, 19, 1044, 18, 17, 20, 16, 15, 14, 1039,
	1056, 76, 29, 13, 177, 1043, 1058, 12, 1057, 11,
	10, 9, 76, 8, 883, 7, 6, 5, 884, 808,
	809, 810, 811, 1055, 4, 888, 889, 890, 210, 22,
	2, 0, 499, 0, 899, 819, 820, 821, 0, 905,
	0, 906, 907, 908, 909, 0, 0, 0, 0, 0,
	289, 1086, 0, 1073, 1074, 76, 76, 0, 76, 0,
	0, 1030, 0, 0, 1088, 0, 0, 1091, 0, 0,
	0, 0, 1095, 0, 0, 0, 1045, 1046, 1115, 0,
	1047, 76, 1102, 1049, 0, 0, 0, 732, 733, 0,
	177, 288, 301, 740, 0, 0, 0, 0, 0, 76,
	301, 1120, 0, 0, 0, 0, 0, 747, 0, 749,
	750, 301, 301, 301, 301, 301, 301, 301, 301, 1131,
	1132, 1133, 0, 939, 1128, 301, 301, 1134, 0, 0,
	0, 0, 0, 0, 432, 0, 1136, 0, 691, 76,
	76, 0, 0, 0, 675, 0, 0, 0, 434, 435,
	436, 1150, 439, 440, 467, 1149, 0, 301, 1153, 442,
	877, 878, 879, 76, 0, 76, 76, 548, 551, 552,
	553, 549, 1038, 550, 554, 1168, 0, 922, 923, 1007,
	0, 0, 1037, 0, 0, 1165, 0, 0, 0, 1118,
	177, 1143, 0, 1145, 1176, 0, 513, 723, 76, 0,
	0, 1182, 0, 1193, 0, 0, 0, 737, 737, 1167,
	0, 76, 177, 737, 1155, 0, 0, 1038, 76, 47,
	1192, 76, 0, 0, 177, 0, 1053, 1037, 1204, 0,
	737, 0, 0, 1208, 0, 0, 0, 0, 0, 0,
	299, 0, 0, 1188, 0, 1189, 0, 0, 789, 0,
	870, 0, 1154, 1205, 0, 0, 0, 0, 0, 301,
	0, 756, 1228, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 1233, 76, 696, 76, 76, 76, 177, 76,
	1238, 0, 76, 0, 0, 0, 0, 1242, 1243, 0,
	0, 0, 0, 0, 0, 0, 1096, 885, 0, 1250,
	0, 0, 0, 1098, 0, 0, 0, 0, 76, 76,
	76, 0, 0, 900, 1107, 1108, 1109, 0, 0, 1112,
	0, 301, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 301, 1122, 1123, 1124, 691, 1127, 0, 0, 0,
	0, 0, 1005, 1006, 0, 288, 288, 288, 288, 288,
	76, 76, 0, 0, 301, 1022, 1023, 0, 1025, 1026,
	288, 0, 0, 76, 0, 0, 0, 629, 0, 288,
	0, 0, 0, 0, 0, 638, 76, 0, 0, 0,
	1237, 513, 0, 0, 0, 0, 649, 650, 651, 652,
	653, 654, 655, 656, 0, 0, 76, 0, 0, 0,
	657, 658, 0, 0, 0, 0, 0, 0, 0, 0,
	1162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 1173, 1174, 1175, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 1100, 0, 1101, 76, 0, 1103, 0, 1105,
	0, 1196, 1197, 1198, 1199, 0, 789, 0, 175, 0,
	0, 199, 0, 0, 933, 1097, 0, 0, 290, 0,
	0, 186, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 223, 0, 175, 175, 0, 0, 0,
	0, 175, 1139, 0, 1224, 196, 0, 0, 0, 1229,
	696, 0, 970, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 1234, 0, 0, 0, 0, 0, 966, 301,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 404, 0, 0, 0,
	0, 0, 0, 1001, 301, 181, 1254, 1255, 0, 0,
	0, 183, 0, 0, 0, 0, 0, 0, 189, 185,
	0, 0, 301, 0, 0, 1024, 0, 0, 0, 0,
	0, 1157, 1158, 0, 1159, 1160, 1161, 0, 0, 0,
	0, 288, 0, 0, 301, 187, 0, 0, 191, 175,
	0, 175, 0, 0, 0, 0, 836, 175, 838, 737,
	0, 0, 1041, 933, 175, 737, 857, 789, 0, 789,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 301, 1061,
	0, 0, 0, 0, 412, 0, 413, 0, 0, 0,
	0, 0, 420, 184, 190, 192, 193, 194, 195, 422,
	444, 198, 197, 0, 23, 24, 48, 26, 27, 0,
	0, 1087, 0, 0, 0, 1001, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 42, 0, 0, 0, 0,
	28, 1092, 0, 0, 301, 0, 478, 477, 487, 488,
	480, 481, 482, 483, 484, 485, 486, 479, 0, 37,
	489, 0, 0, 50, 0, 0, 175, 0, 0, 0,
	0, 1252, 0, 175, 563, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 789, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1130, 0, 1130, 1130,
	1130, 0, 1135, 0, 0, 301, 0, 0, 0, 0,
	0, 541, 0, 970, 789, 0, 0, 0, 0, 0,
	565, 0, 30, 31, 33, 32, 35, 0, 0, 0,
	0, 301, 301, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 36, 43, 44, 0, 0, 45, 46,
	34, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 288, 38, 39, 0, 40, 41, 0, 0, 1113,
	444, 0, 0, 1169, 1170, 0, 0, 0, 0, 994,
	0, 0, 1114, 0, 0, 0, 1061, 0, 0, 0,
	0, 0, 0, 0, 175, 175, 0, 0, 175, 1130,
	0, 175, 0, 0, 0, 647, 478, 477, 487, 488,
	480, 481, 482, 483, 484, 485, 486, 479, 0, 1207,
	489, 0, 0, 0, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 49, 1110, 444, 0, 0, 0, 636,
	637, 0, 0, 640, 175, 0, 643, 0, 0, 0,
	0, 737, 0, 647, 1230, 478, 477, 487, 488, 480,
	481, 482, 483, 484, 485, 486, 479, 0, 1236, 489,
	659, 478, 477, 487, 488, 480, 481, 482, 483, 484,
	485, 486, 479, 0, 0, 489, 0, 0, 0, 680,
	0, 0, 0, 0, 223, 0, 0, 0, 0, 223,
	223, 0, 0, 738, 738, 223, 0, 0, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 223,
	223, 223, 223, 0, 175, 0, 738, 175, 175, 175,
	175, 175, 0, 0, 0, 0, 0, 0, 0, 770,
	0, 0, 175, 0, 0, 0, 563, 0, 0, 0,
	0, 175, 175, 0, 473, 1111, 476, 0, 0, 0,
	0, 0, 490, 491, 492, 493, 494, 495, 496, 753,
	474, 475, 472, 478, 477, 487, 488, 480, 481, 482,
	483, 484, 485, 486, 479, 0, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 781, 0, 0,
	0, 0, 0, 0, 0, 0, 1148, 0, 0, 0,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 0, 175, 0, 478, 477,
	487, 488, 480, 481, 482, 483, 484, 485, 486, 479,
	0, 0, 489, 0, 0, 0, 122, 0, 0, 0,
	647, 466, 882, 0, 0, 0, 92, 0, 0, 831,
	0, 105, 223, 107, 0, 0, 135, 115, 855, 0,
	0, 856, 478, 477, 487, 488, 480, 481, 482, 483,
	484, 485, 486, 479, 0, 75, 489, 468, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 463,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 223, 478, 477, 487, 488,
	480, 481, 482, 483, 484, 485, 486, 479, 0, 0,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 127, 0, 0, 138, 97,
	96, 104, 0, 175, 0, 88, 0, 132, 123, 150,
	0, 124, 131, 108, 142, 128, 149, 179, 156, 140,
	155, 78, 139, 148, 87, 133, 80, 146, 137, 113,
	101, 102, 79, 0, 130, 91, 95, 90, 121, 143,
	144, 89, 162, 83, 154, 82, 84, 153, 120, 141,
	147, 114, 111, 81, 145, 112, 110, 103, 93, 98,
	125, 109, 126, 99, 117, 116, 118, 0, 0, 0,
	136, 151, 163, 0, 0, 157, 158, 159, 160, 119,
	85, 100, 134, 0, 0, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 223,
	77, 0, 106, 161, 129, 94, 152, 0, 0, 602,
	223, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 997, 738, 0, 0, 0, 0,
	0, 738, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 0, 603, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 616, 617, 618, 619,
	620, 621, 622, 0, 623, 624, 625, 626, 627, 604,
	605, 606, 607, 588, 589, 0, 1090, 591, 0, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 608,
	609, 610, 611, 612, 613, 614, 615, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 389, 379, 0, 349, 391, 327, 341, 358,
	399, 342, 343, 372, 313, 357, 122, 339, 359, 0,
	330, 308, 336, 309, 328, 351, 92, 354, 326, 381,
	362, 105, 397, 107, 367, 0, 135, 115, 0, 0,
	353, 383, 355, 377, 348, 373, 318, 366, 392, 340,
	370, 393, 0, 0, 0, 75, 0, 790, 791, 0,
	0, 0, 0, 0, 86, 0, 369, 388, 338, 371,
	307, 368, 0, 311, 314, 398, 386, 333, 334, 940,
	0, 0, 0, 0, 0, 0, 352, 356, 374, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	365, 0, 0, 0, 315, 312, 0, 350, 0, 0,
	0, 317, 0, 332, 375, 0, 306, 378, 384, 347,
	178, 387, 345, 344, 390, 127, 0, 738, 138, 97,
	96, 104, 382, 329, 337, 88, 335, 132, 123, 150,
	364, 124, 131, 108, 142, 128, 149, 179, 156, 140,
	155, 78, 139, 148, 87, 133, 80, 146, 137, 113,
	101, 102, 79, 0, 130, 91, 95, 90, 121, 143,
	144, 89, 162, 83, 154, 82, 84, 153, 120, 141,
	147, 114, 111, 81, 145, 112, 110, 103, 93, 98,
	125, 109, 126, 99, 117, 116, 118, 0, 310, 0,
	136, 151, 163, 325, 385, 157, 158, 159, 160, 119,
	85, 100, 134, 321, 324, 319, 320, 360, 361, 394,
	395, 396, 376, 316, 0, 322, 323, 0, 380, 363,
	77, 0, 106, 161, 129, 94, 152, 389, 379, 0,
	349, 391, 327, 341, 358, 399, 342, 343, 372, 313,
	357, 122, 339, 359, 0, 330, 308, 336, 309, 328,
	351, 92, 354, 326, 381, 362, 105, 397, 107, 367,
	0, 135, 115, 0, 0, 353, 383, 355, 377, 348,
	373, 318, 366, 392, 340, 370, 393, 0, 0, 0,
	75, 0, 790, 791, 0, 0, 0, 0, 0, 86,
	0, 369, 388, 338, 371, 307, 368, 0, 311, 314,
	398, 386, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 352, 356, 374, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 365, 0, 0, 0, 315,
	312, 0, 350, 0, 0, 0, 317, 0, 332, 375,
	0, 306, 378, 384, 347, 178, 387, 345, 344, 390,
	127, 0, 0, 138, 97, 96, 104, 382, 329, 337,
	88, 335, 132, 123, 150, 364, 124, 131, 108, 142,
	128, 149, 179, 156, 140, 155, 78, 139, 148, 87,
	133, 80, 146, 137, 113, 101, 102, 79, 0, 130,
	91, 95, 90, 121, 143, 144, 89, 162, 83, 154,
	82, 84, 153, 120, 141, 147, 114, 111, 81, 145,
	112, 110, 103, 93, 98, 125, 109, 126, 99, 117,
	116, 118, 0, 310, 0, 136, 151, 163, 325, 385,
	157, 158, 159, 160, 119, 85, 100, 134, 321, 324,
	319, 320, 360, 361, 394, 395, 396, 376, 316, 0,
	322, 323, 0, 380, 363, 77, 0, 106, 161, 129,
	94, 152, 389, 379, 0, 349, 391, 327, 341, 358,
	399, 342, 343, 372, 313, 357, 122, 339, 359, 0,
	330, 308, 336, 309, 328, 351, 92, 354, 326, 381,
	362, 105, 397, 107, 367, 0, 135, 115, 0, 0,
	353, 383, 355, 377, 348, 373, 318, 366, 392, 340,
	370, 393, 50, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 369, 388, 338, 371,
	307, 368, 0, 311, 314, 398, 386, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 352, 356, 374, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	365, 0, 0, 0, 315, 312, 0, 350, 0, 0,
	0, 317, 0, 332, 375, 0, 306, 378, 384, 347,
	178, 387, 345, 344, 390, 127, 0, 0, 138, 97,
	96, 104, 382, 329, 337, 88, 335, 132, 123, 150,
	364, 124, 131, 108, 142, 128, 149, 179, 156, 140,
	155, 78, 139, 148, 87, 133, 80, 146, 137, 113,
	101, 102, 79, 0, 130, 91, 95, 90, 121, 143,
	144, 89, 162, 83, 154, 82, 84, 153, 120, 141,
	147, 114, 111, 81, 145, 112, 110, 103, 93, 98,
	125, 109, 126, 99, 117, 116, 118, 0, 310, 0,
	136, 151, 163, 325, 385, 157, 158, 159, 160, 119,
	85, 100, 134, 321, 324, 319, 320, 360, 361, 394,
	395, 396, 376, 316, 0, 322, 323, 0, 380, 363,
	77, 0, 106, 161, 129, 94, 152, 389, 379, 0,
	349, 391, 327, 341, 358, 399, 342, 343, 372, 313,
	357, 122, 339, 359, 0, 330, 308, 336, 309, 328,
	351, 92, 354, 326, 381, 362, 105, 397, 107, 367,
	0, 135, 115, 0, 0, 353, 383, 355, 377, 348,
	373, 318, 366, 392, 340, 370, 393, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 369, 388, 338, 371, 307, 368, 0, 311, 314,
	398, 386, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 352, 356, 374, 346, 0, 0, 0, 0, 0,
	0, 1000, 0, 331, 0, 365, 0, 0, 0, 315,
	312, 0, 350, 0, 0, 0, 317, 0, 332, 375,
	0, 306, 378, 384, 347, 178, 387, 345, 344, 390,
	127, 0, 0, 138, 97, 96, 104, 382, 329, 337,
	88, 335, 132, 123, 150, 364, 124, 131, 108, 142,
	128, 149, 179, 156, 140, 155, 78, 139, 148, 87,
	133, 80, 146, 137, 113, 101, 102, 79, 0, 130,
	91, 95, 90, 121, 143, 144, 89, 162, 83, 154,
	82, 84, 153, 120, 141, 147, 114, 111, 81, 145,
	112, 110, 103, 93, 98, 125, 109, 126, 99, 117,
	116, 118, 0, 310, 0, 136, 151, 163, 325, 385,
	157, 158, 159, 160, 119, 85, 100, 134, 321, 324,
	319, 320, 360, 361, 394, 395, 396, 376, 316, 0,
	322, 323, 0, 380, 363, 77, 0, 106, 161, 129,
	94, 152, 389, 379, 0, 349, 391, 327, 341, 358,
	399, 342, 343, 372, 313, 357, 122, 339, 359, 0,
	330, 308, 336, 309, 328, 351, 92, 354, 326, 381,
	362, 105, 397, 107, 367, 0, 135, 115, 0, 0,
	353, 383, 355, 377, 348, 373, 318, 366, 392, 340,
	370, 393, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 369, 388, 338, 371,
	307, 368, 0, 311, 314, 398, 386, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 352, 356, 374, 346,
	0, 0, 0, 0, 0, 0, 689, 0, 331, 0,
	365, 0, 0, 0, 315, 312, 0, 350, 0, 0,
	0, 317, 0, 332, 375, 0, 306, 378, 384, 347,
	178, 387, 345, 344, 390, 127, 0, 0, 138, 97,
	96, 104, 382, 329, 337, 88, 335, 132, 123, 150,
	364, 124, 131, 108, 142, 128, 149, 179, 156, 140,
	155, 78, 139, 148, 87, 133, 80, 146, 137, 113,
	101, 102, 79, 0, 130, 91, 95, 90, 121, 143,
	144, 89, 162, 83, 154, 82, 84, 153, 120, 141,
	147, 114, 111, 81, 145, 112, 110, 103, 93, 98,
	125, 109, 126, 99, 117, 116, 118, 0, 310, 0,
	136, 151, 163, 325, 385, 157, 158, 159, 160, 119,
	85, 100, 134, 321, 324, 319, 320, 360, 361, 394,
	395, 396, 376, 316, 0, 322, 323, 0, 380, 363,
	77, 0, 106, 161, 129, 94, 152, 389, 379, 0,
	349, 391, 327, 341, 358, 399, 342, 343, 372, 313,
	357, 122, 339, 359, 0, 330, 308, 336, 309, 328,
	351, 92, 354, 326, 381, 362, 105, 397, 107, 367,
	0, 135, 115, 0, 0, 353, 383, 355, 377, 348,
	373, 318, 366, 392, 340, 370, 393, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 369, 388, 338, 371, 307, 368, 0, 311, 314,
	398, 386, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 352, 356, 374, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 365, 0, 0, 0, 315,
	312, 0, 350, 0, 0, 0, 317, 0, 332, 375,
	0, 306, 378, 384, 347, 178, 387, 345, 344, 390,
	127, 0, 0, 138, 97, 96, 104, 382, 329, 337,
	88, 335, 132, 123, 150, 364, 124, 131, 108, 142,
	128, 149, 179, 156, 140, 155, 78, 139, 148, 87,
	133, 80, 146, 137, 113, 101, 102, 79, 0, 130,
	91, 95, 90, 121, 143, 144, 89, 162, 83, 154,
	82, 84, 153, 120, 141, 147, 114, 111, 81, 145,
	112, 110, 103, 93, 98, 125, 109, 126, 99, 117,
	116, 118, 0, 310, 0, 136, 151, 163, 325, 385,
	157, 158, 159, 160, 119, 85, 100, 134, 321, 324,
	319, 320, 360, 361, 394, 395, 396, 376, 316, 0,
	322, 323, 0, 380, 363, 77, 0, 106, 161, 129,
	94, 152, 389, 379, 0, 349, 391, 327, 341, 358,
	399, 342, 343, 372, 313, 357, 122, 339, 359, 0,
	330, 308, 336, 309, 328, 351, 92, 354, 326, 381,
	362, 105, 397, 107, 367, 0, 135, 115, 0, 0,
	353, 383, 355, 377, 348, 373, 318, 366, 392, 340,
	370, 393, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 369, 388, 338, 371,
	307, 368, 0, 311, 314, 398, 386, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 352, 356, 374, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	365, 0, 0, 0, 315, 312, 0, 350, 0, 0,
	0, 317, 0, 332, 375, 0, 306, 378, 384, 347,
	178, 387, 345, 344, 390, 127, 0, 0, 138, 97,
	96, 104, 382, 329, 337, 88, 335, 132, 123, 150,
	364, 124, 131, 108, 142, 128, 149, 179, 156, 140,
	155, 78, 139, 148, 87, 133, 80, 146, 137, 113,
	101, 102, 79, 0, 130, 91, 95, 90, 121, 143,
	144, 89, 162, 83, 154, 82, 84, 153, 120, 141,
	147, 114, 111, 81, 145, 112, 110, 103, 93, 98,
	125, 109, 126, 99, 117, 116, 118, 0, 310, 0,
	136, 151, 163, 325, 385, 157, 158, 159, 160, 119,
	85, 100, 134, 321, 324, 319, 320, 360, 361, 394,
	395, 396, 376, 316, 0, 322, 323, 0, 380, 363,
	77, 0, 106, 161, 129, 94, 152, 389, 379, 0,
	349, 391, 327, 341, 358, 399, 342, 343, 372, 313,
	357, 122, 339, 359, 0, 330, 308, 336, 309, 328,
	351, 92, 354, 326, 381, 362, 105, 397, 107, 367,
	0, 135, 115, 0, 0, 353, 383, 355, 377, 348,
	373, 318, 366, 392, 340, 370, 393, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 369, 388, 338, 371, 307, 368, 0, 311, 314,
	398, 386, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 352, 356, 374, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 365, 0, 0, 0, 315,
	312, 0, 350, 0, 0, 0, 317, 0, 332, 375,
	0, 306, 378, 384, 347, 178, 387, 345, 344, 390,
	127, 0, 0, 138, 97, 96, 104, 382, 329, 337,
	88, 335, 132, 123, 150, 364, 124, 131, 108, 142,
	128, 149, 179, 156, 140, 155, 78, 139, 148, 87,
	133, 80, 146, 137, 113, 101, 102, 79, 0, 130,
	91, 95, 90, 121, 143, 144, 89, 162, 83, 154,
	82, 304, 153, 120, 141, 147, 114, 111, 81, 145,
	112, 110, 103, 93, 98, 125, 109, 126, 99, 117,
	116, 118, 0, 310, 0, 136, 151, 163, 325, 385,
	157, 158, 159, 160, 305, 303, 100, 134, 321, 324,
	319, 320, 360, 361, 394, 395, 396, 376, 316, 0,
	322, 323, 0, 380, 363, 77, 0, 106, 161, 129,
	94, 152, 389, 379, 0, 349, 391, 327, 341, 358,
	399, 342, 343, 372, 313, 357, 122, 339, 359, 0,
	330, 308, 336, 309, 328, 351, 92, 354, 326, 381,
	362, 105, 397, 107, 367, 0, 135, 115, 0, 0,
	353, 383, 355, 377, 348, 373, 318, 366, 392, 340,
	370, 393, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 369, 388, 338, 371,
	307, 368, 0, 311, 314, 398, 386, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 352, 356, 374, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	365, 0, 0, 0, 315, 312, 0, 350, 0, 0,
	0, 317, 0, 332, 375, 0, 306, 378, 384, 347,
	178, 387, 345, 344, 390, 127, 0, 0, 138, 97,
	96, 104, 382, 329, 337, 88, 335, 132, 123, 150,
	364, 124, 131, 108, 142, 128, 149, 179, 156, 140,
	155, 78, 139, 148, 87, 133, 80, 146, 137, 113,
	101, 102, 79, 0, 130, 91, 95, 90, 121, 143,
	144, 89, 162, 83, 154, 82, 84, 153, 120, 141,
	147, 114, 111, 81, 145, 112, 110, 103, 93, 98,
	125, 109, 126, 99, 117, 116, 118, 0, 310, 0,
	136, 151, 163, 325, 385, 157, 158, 159, 160, 119,
	85, 100, 134, 321, 324, 319, 320, 360, 361, 394,
	395, 396, 376, 316, 0, 322, 323, 0, 380, 363,
	77, 0, 106, 161, 129, 94, 152, 389, 379, 0,
	349, 391, 327, 341, 358, 399, 342, 343, 372, 313,
	357, 122, 339, 359, 0, 330, 308, 336, 309, 328,
	351, 92, 354, 326, 381, 362, 105, 397, 107, 367,
	0, 135, 115, 0, 0, 353, 383, 355, 377, 348,
	373, 318, 366, 392, 340, 370, 393, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 369, 388, 338, 371, 307, 368, 0, 311, 314,
	398, 386, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 352, 356, 374, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 365, 0, 0, 0, 315,
	312, 0, 350, 0, 0, 0, 317, 0, 332, 375,
	0, 306, 378, 384, 347, 178, 387, 345, 344, 390,
	127, 0, 0, 138, 97, 96, 104, 382, 329, 337,
	88, 335, 132, 123, 150, 364, 124, 131, 108, 142,
	128, 149, 179, 156, 140, 155, 78, 139, 148, 87,
	133, 80, 146, 137, 113, 101, 102, 79, 0, 130,
	91, 95, 90, 121, 143, 144, 89, 162, 83, 154,
	82, 304, 153, 120, 141, 147, 114, 111, 81, 145,
	112, 110, 103, 93, 98, 125, 109, 126, 99, 117,
	116, 118, 0, 310, 0, 136, 151, 163, 325, 385,
	157, 158, 159, 160, 305, 303, 298, 297, 321, 324,
	319, 320, 360, 361, 394, 395, 396, 376, 316, 0,
	322, 323, 0, 380, 363, 77, 0, 106, 161, 129,
	94, 152, 122, 0, 0, 0, 725, 0, 230, 0,
	0, 0, 92, 0, 227, 0, 0, 105, 269, 107,
	0, 0, 135, 115, 0, 0, 0, 0, 260, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 228, 248, 247, 250, 251, 252, 253, 0, 0,
	86, 249, 254, 255, 256, 0, 0, 225, 241, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	238, 239, 221, 0, 0, 0, 280, 0, 240, 0,
	0, 236, 237, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 278,
	0, 127, 0, 0, 138, 97, 96, 104, 0, 0,
	0, 88, 0, 132, 123, 150, 0, 124, 131, 108,
	142, 128, 149, 179, 156, 140, 155, 78, 139, 148,
	87, 133, 80, 146, 137, 113, 101, 102, 79, 0,
	130, 91, 95, 90, 121, 143, 144, 89, 162, 83,
	154, 82, 84, 153, 120, 141, 147, 114, 111, 81,
	145, 112, 110, 103, 93, 98, 125, 109, 126, 99,
	117, 116, 118, 0, 0, 0, 136, 151, 163, 0,
	0, 157, 158, 159, 160, 119, 85, 100, 134, 270,
	279, 276, 277, 274, 275, 273, 272, 271, 281, 262,
	263, 264, 265, 267, 0, 266, 77, 122, 106, 161,
	129, 94, 152, 230, 0, 0, 0, 92, 0, 227,
	0, 0, 105, 269, 107, 0, 0, 135, 115, 0,
	0, 0, 0, 260, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 444, 228, 248, 247, 250,
	251, 252, 253, 0, 0, 86, 249, 254, 255, 256,
	0, 0, 225, 241, 0, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 238, 239, 0, 0, 0,
	0, 280, 0, 240, 0, 0, 236, 237, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 278, 0, 127, 0, 0, 138,
	97, 96, 104, 0, 0, 0, 88, 0, 132, 123,
	150, 0, 124, 131, 108, 142, 128, 149, 179, 156,
	140, 155, 78, 139, 148, 87, 133, 80, 146, 137,
	113, 101, 102, 79, 0, 130, 91, 95, 90, 121,
	143, 144, 89, 162, 83, 154, 82, 84, 153, 120,
	141, 147, 114, 111, 81, 145, 112, 110, 103, 93,
	98, 125, 109, 126, 99, 117, 116, 118, 0, 0,
	0, 136, 151, 163, 0, 0, 157, 158, 159, 160,
	119, 85, 100, 134, 270, 279, 276, 277, 274, 275,
	273, 272, 271, 281, 262, 263, 264, 265, 267, 0,
	266, 77, 122, 106, 161, 129, 94, 152, 230, 0,
	0, 0, 92, 0, 227, 0, 0, 105, 269, 107,
	0, 0, 135, 115, 0, 0, 0, 0, 260, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 228, 248, 247, 250, 251, 252, 253, 0, 0,
	86, 249, 254, 255, 256, 0, 0, 225, 241, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	238, 239, 221, 0, 0, 0, 280, 0, 240, 0,
	0, 236, 237, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 278,
	0, 127, 0, 0, 138, 97, 96, 104, 0, 0,
	0, 88, 0, 132, 123, 150, 0, 124, 131, 108,
	142, 128, 149, 179, 156, 140, 155, 78, 139, 148,
	87, 133, 80, 146, 137, 113, 101, 102, 79, 0,
	130, 91, 95, 90, 121, 143, 144, 89, 162, 83,
	154, 82, 84, 153, 120, 141, 147, 114, 111, 81,
	145, 112, 110, 103, 93, 98, 125, 109, 126, 99,
	117, 116, 118, 0, 0, 0, 136, 151, 163, 0,
	0, 157, 158, 159, 160, 119, 85, 100, 134, 270,
	279, 276, 277, 274, 275, 273, 272, 271, 281, 262,
	263, 264, 265, 267, 23, 266, 77, 0, 106, 161,
	129, 94, 152, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 92, 0, 227,
	0, 0, 105, 269, 107, 0, 0, 135, 115, 0,
	0, 0, 0, 260, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 228, 248, 247, 250,
	251, 252, 253, 0, 0, 86, 249, 254, 255, 256,
	0, 0, 225, 241, 0, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 238, 239, 0, 0, 0,
	0, 280, 0, 240, 0, 0, 236, 237, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 278, 0, 127, 0, 0, 138,
	97, 96, 104, 0, 0, 0, 88, 0, 132, 123,
	150, 0, 124, 131, 108, 142, 128, 149, 179, 156,
	140, 155, 78, 139, 148, 87, 133, 80, 146, 137,
	113, 101, 102, 79, 0, 130, 91, 95, 90, 121,
	143, 144, 89, 162, 83, 154, 82, 84, 153, 120,
	141, 147, 114, 111, 81, 145, 112, 110, 103, 93,
	98, 125, 109, 126, 99, 117, 116, 118, 0, 0,
	0, 136, 151, 163, 0, 0, 157, 158, 159, 160,
	119, 85, 100, 134, 270, 279, 276, 277, 274, 275,
	273, 272, 271, 281, 262, 263, 264, 265, 267, 0,
	266, 77, 122, 106, 161, 129, 94, 152, 230, 0,
	0, 0, 92, 0, 227, 0, 0, 105, 269, 107,
	0, 0, 135, 115, 0, 0, 0, 0, 260, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 228, 248, 247, 250, 251, 252, 253, 0, 0,
	86, 249, 254, 255, 256, 0, 0, 225, 241, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	238, 239, 0, 0, 0, 0, 280, 0, 240, 0,
	0, 236, 237, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 278,
	0, 127, 0, 0, 138, 97, 96, 104, 0, 0,
	0, 88, 0, 132, 123, 150, 0, 124, 131, 108,
	142, 128, 149, 179, 156, 140, 155, 78, 139, 148,
	87, 133, 80, 146, 137, 113, 101, 102, 79, 0,
	130, 91, 95, 90, 121, 143, 144, 89, 162, 83,
	154, 82, 84, 153, 120, 141, 147, 114, 111, 81,
	145, 112, 110, 103, 93, 98, 125, 109, 126, 99,
	117, 116, 118, 0, 0, 0, 136, 151, 163, 0,
	0, 157, 158, 159, 160, 119, 85, 100, 134, 270,
	279, 276, 277, 274, 275, 273, 272, 271, 281, 262,
	263, 264, 265, 267, 122, 266, 77, 0, 106, 161,
	129, 94, 152, 0, 92, 0, 0, 0, 0, 105,
	269, 107, 0, 0, 135, 115, 0, 0, 0, 0,
	260, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 228, 248, 247, 250, 251, 252, 253,
	0, 0, 86, 249, 254, 255, 256, 0, 0, 0,
	241, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 238, 239, 0, 0, 0, 0, 280, 0,
	240, 0, 0, 236, 237, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 278, 0, 127, 0, 0, 138, 97, 96, 104,
	0, 0, 0, 88, 0, 132, 123, 150, 1253, 124,
	131, 108, 142, 128, 149, 179, 156, 140, 155, 78,
	139, 148, 87, 133, 80, 146, 137, 113, 101, 102,
	79, 0, 130, 91, 95, 90, 121, 143, 144, 89,
	162, 83, 154, 82, 84, 153, 120, 141, 147, 114,
	111, 81, 145, 112, 110, 103, 93, 98, 125, 109,
	126, 99, 117, 116, 118, 0, 0, 0, 136, 151,
	163, 0, 0, 157, 158, 159, 160, 119, 85, 100,
	134, 270, 279, 276, 277, 274, 275, 273, 272, 271,
	281, 262, 263, 264, 265, 267, 122, 266, 77, 0,
	106, 161, 129, 94, 152, 0, 92, 0, 0, 0,
	0, 105, 269, 107, 0, 0, 135, 115, 0, 0,
	0, 0, 260, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 228, 248, 247, 250, 251,
	252, 253, 0, 0, 86, 249, 254, 255, 256, 0,
	0, 0, 241, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 238, 239, 0, 0, 0, 0,
	280, 0, 240, 0, 0, 236, 237, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 278, 0, 127, 0, 0, 138, 97,
	96, 104, 0, 0, 0, 88, 0, 132, 123, 150,
	0, 124, 131, 108, 142, 128, 149, 179, 156, 140,
	155, 78, 139, 148, 87, 133, 80, 146, 137, 113,
	101, 102, 79, 0, 130, 91, 95, 90, 121, 143,
	144, 89, 162, 83, 154, 82, 84, 153, 120, 141,
	147, 114, 111, 81, 145, 112, 110, 103, 93, 98,
	125, 109, 126, 99, 117, 116, 118, 0, 0, 0,
	136, 151, 163, 0, 0, 157, 158, 159, 160, 119,
	85, 100, 134, 270, 279, 276, 277, 274, 275, 273,
	272, 271, 281, 262, 263, 264, 265, 267, 122, 266,
	77, 0, 106, 161, 129, 94, 152, 0, 92, 0,
	0, 0, 0, 105, 0, 107, 0, 0, 135, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 478, 477, 487, 488, 480, 481, 482, 483,
	484, 485, 486, 479, 0, 0, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 127, 0, 0,
	138, 97, 96, 104, 0, 0, 0, 88, 0, 132,
	123, 150, 0, 124, 131, 108, 142, 128, 149, 179,
	156, 140, 155, 78, 139, 148, 87, 133, 80, 146,
	137, 113, 101, 102, 79, 0, 130, 91, 95, 90,
	121, 143, 144, 89, 162, 83, 154, 82, 84, 153,
	120, 141, 147, 114, 111, 81, 145, 112, 110, 103,
	93, 98, 125, 109, 126, 99, 117, 116, 118, 0,
	0, 0, 136, 151, 163, 122, 0, 157, 158, 159,
	160, 119, 85, 100, 134, 92, 0, 0, 0, 0,
	105, 0, 107, 0, 0, 135, 115, 0, 0, 0,
	0, 0, 77, 0, 106, 161, 129, 94, 152, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 72, 0, 67,
	0, 0, 0, 73, 127, 0, 0, 138, 97, 96,
	104, 0, 0, 0, 88, 0, 132, 123, 150, 0,
	124, 131, 108, 142, 128, 149, 69, 156, 140, 155,
	78, 139, 148, 87, 133, 80, 146, 137, 113, 101,
	102, 79, 0, 130, 91, 95, 90, 121, 143, 144,
	89, 162, 83, 154, 82, 84, 153, 120, 141, 147,
	114, 111, 81, 145, 112, 110, 103, 93, 98, 125,
	109, 126, 99, 117, 116, 118, 0, 0, 0, 136,
	151, 163, 0, 0, 157, 158, 159, 160, 119, 85,
	100, 134, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 106, 161, 129, 94, 152, 122, 0, 0, 0,
	0, 562, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 105, 0, 107, 0, 0, 135, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 564, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 127, 0, 0, 138, 97,
	96, 104, 0, 0, 0, 88, 0, 132, 123, 150,
	0, 124, 131, 108, 142, 128, 149, 179, 156, 140,
	155, 78, 139, 148, 87, 133, 80, 146, 137, 113,
	101, 102, 79, 0, 130, 91, 95, 90, 121, 143,
	144, 89, 162, 83, 154, 82, 84, 153, 120, 141,
	147, 114, 111, 81, 145, 112, 110, 103, 93, 98,
	125, 109, 126, 99, 117, 116, 118, 0, 0, 0,
	136, 151, 163, 0, 0, 157, 158, 159, 160, 119,
	85, 100, 134, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	77, 0, 106, 161, 129, 94, 152, 92, 0, 0,
	0, 0, 105, 0, 107, 0, 0, 135, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 127, 0, 0, 138,
	97, 96, 104, 0, 0, 0, 88, 0, 132, 123,
	150, 0, 124, 131, 108, 142, 128, 149, 179, 156,
	140, 155, 78, 139, 148, 87, 133, 80, 146, 137,
	113, 101, 102, 79, 0, 130, 91, 95, 90, 121,
	143, 144, 89, 162, 83, 154, 82, 84, 153, 120,
	141, 147, 114, 111, 81, 145, 112, 110, 103, 93,
	98, 125, 109, 126, 99, 117, 116, 118, 0, 0,
	0, 136, 151, 163, 0, 0, 157, 158, 159, 160,
	119, 85, 100, 134, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	0, 77, 0, 106, 161, 129, 94, 152, 92, 0,
	0, 0, 0, 105, 0, 107, 0, 0, 135, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 127, 0, 0,
	138, 97, 96, 104, 0, 0, 0, 88, 0, 132,
	123, 150, 0, 124, 131, 108, 142, 128, 149, 179,
	156, 140, 155, 78, 139, 148, 87, 133, 80, 146,
	137, 113, 101, 102, 79, 0, 130, 91, 95, 90,
	121, 143, 144, 89, 162, 83, 154, 82, 84, 153,
	120, 141, 147, 114, 111, 81, 145, 112, 110, 103,
	93, 98, 125, 109, 126, 99, 117, 116, 118, 0,
	0, 0, 136, 151, 163, 122, 0, 157, 158, 159,
	160, 119, 85, 100, 134, 92, 0, 0, 0, 0,
	105, 0, 107, 0, 0, 135, 115, 0, 0, 0,
	0, 0, 77, 0, 106, 161, 129, 94, 152, 0,
	0, 0, 0, 0, 75, 0, 0, 676, 0, 0,
	677, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 127, 0, 0, 138, 97, 96,
	104, 0, 0, 0, 88, 0, 132, 123, 150, 0,
	124, 131, 108, 142, 128, 149, 179, 156, 140, 155,
	78, 139, 148, 87, 133, 80, 146, 137, 113, 101,
	102, 79, 0, 130, 91, 95, 90, 121, 143, 144,
	89, 162, 83, 154, 82, 84, 153, 120, 141, 147,
	114, 111, 81, 145, 112, 110, 103, 93, 98, 125,
	109, 126, 99, 117, 116, 118, 0, 0, 0, 136,
	151, 163, 122, 0, 157, 158, 159, 160, 119, 85,
	100, 134, 92, 0, 577, 0, 0, 105, 0, 107,
	0, 0, 135, 115, 0, 0, 0, 0, 0, 77,
	0, 106, 161, 129, 94, 152, 0, 0, 0, 0,
	0, 75, 0, 576, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 127, 0, 0, 138, 97, 96, 104, 0, 0,
	0, 88, 0, 132, 123, 150, 0, 124, 131, 108,
	142, 128, 149, 179, 156, 140, 155, 78, 139, 148,
	87, 133, 80, 146, 137, 113, 101, 102, 79, 0,
	130, 91, 95, 90, 121, 143, 144, 89, 162, 83,
	154, 82, 84, 153, 120, 141, 147, 114, 111, 81,
	145, 112, 110, 103, 93, 98, 125, 109, 126, 99,
	117, 116, 118, 0, 0, 0, 136, 151, 163, 0,
	0, 157, 158, 159, 160, 119, 85, 100, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 106, 161,
	129, 94, 152, 122, 0, 0, 0, 0, 562, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 105, 0,
	107, 0, 0, 135, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 564, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 127, 0, 0, 138, 97, 96, 104, 0,
	0, 0, 88, 0, 132, 123, 150, 0, 560, 131,
	108, 142, 128, 149, 179, 156, 140, 155, 78, 139,
	148, 87, 133, 80, 146, 137, 113, 101, 102, 79,
	0, 130, 91, 95, 90, 121, 143, 144, 89, 162,
	83, 154, 82, 84, 153, 120, 141, 147, 114, 111,
	81, 145, 112, 110, 103, 93, 98, 125, 109, 126,
	99, 117, 116, 118, 0, 0, 0, 136, 151, 163,
	122, 0, 157, 158, 159, 160, 119, 85, 100, 134,
	92, 0, 0, 0, 0, 105, 0, 107, 0, 0,
	135, 115, 0, 0, 0, 0, 0, 77, 0, 106,
	161, 129, 94, 152, 0, 0, 50, 0, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 127,
	0, 0, 138, 97, 96, 104, 0, 0, 0, 88,
	0, 132, 123, 150, 0, 124, 131, 108, 142, 128,
	149, 179, 156, 140, 155, 78, 139, 148, 87, 133,
	80, 146, 137, 113, 101, 102, 79, 0, 130, 91,
	95, 90, 121, 143, 144, 89, 162, 83, 154, 82,
	84, 153, 120, 141, 147, 114, 111, 81, 145, 112,
	110, 103, 93, 98, 125, 109, 126, 99, 117, 116,
	118, 0, 0, 0, 136, 151, 163, 122, 0, 157,
	158, 159, 160, 119, 85, 100, 134, 92, 0, 0,
	0, 0, 105, 0, 107, 0, 0, 135, 115, 0,
	0, 0, 0, 0, 77, 0, 106, 161, 129, 94,
	152, 0, 0, 0, 0, 0, 176, 0, 564, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 127, 0, 0, 138,
	97, 96, 104, 0, 0, 0, 88, 0, 132, 123,
	150, 0, 124, 131, 108, 142, 128, 149, 179, 156,
	140, 155, 78, 139, 148, 87, 133, 80, 146, 137,
	113, 101, 102, 79, 0, 130, 91, 95, 90, 121,
	143, 144, 89, 162, 83, 154, 82, 84, 153, 120,
	141, 147, 114, 111, 81, 145, 112, 110, 103, 93,
	98, 125, 109, 126, 99, 117, 116, 118, 0, 0,
	0, 136, 151, 163, 122, 0, 157, 158, 159, 160,
	119, 85, 100, 134, 92, 0, 0, 0, 0, 105,
	0, 107, 0, 0, 135, 115, 0, 0, 0, 0,
	0, 77, 0, 106, 161, 129, 94, 152, 0, 0,
	0, 0, 0, 75, 0, 468, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 127, 0, 0, 138, 97, 96, 104,
	0, 0, 0, 88, 0, 132, 123, 150, 0, 124,
	131, 108, 142, 128, 149, 179, 156, 140, 155, 78,
	139, 148, 87, 133, 80, 146, 137, 113, 101, 102,
	79, 0, 130, 91, 95, 90, 121, 143, 144, 89,
	162, 83, 154, 82, 84, 153, 120, 141, 147, 114,
	111, 81, 145, 112, 110, 103, 93, 98, 125, 109,
	126, 99, 117, 116, 118, 0, 0, 0, 136, 151,
	163, 0, 122, 157, 158, 159, 160, 119, 85, 100,
	134, 540, 92, 0, 0, 0, 0, 105, 0, 107,
	0, 0, 135, 115, 0, 0, 0, 0, 77, 0,
	106, 161, 129, 94, 152, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 127, 0, 0, 138, 97, 96, 104, 0, 0,
	0, 88, 0, 132, 123, 150, 0, 124, 131, 108,
	142, 128, 149, 179, 156, 140, 155, 78, 139, 148,
	87, 133, 80, 146, 137, 113, 101, 102, 79, 0,
	130, 91, 95, 90, 121, 143, 144, 89, 162, 83,
	154, 82, 84, 153, 120, 141, 147, 114, 111, 81,
	145, 112, 110, 103, 93, 98, 125, 109, 126, 99,
	117, 116, 118, 0, 0, 0, 136, 151, 163, 0,
	0, 157, 158, 159, 160, 119, 85, 100, 134, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 77, 0, 106, 161,
	129, 94, 152, 92, 0, 0, 0, 0, 105, 0,
	107, 0, 0, 135, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 127, 0, 0, 138, 97, 96, 104, 0,
	0, 0, 88, 0, 132, 123, 150, 0, 124, 131,
	108, 142, 128, 149, 179, 156, 140, 155, 78, 139,
	148, 87, 133, 80, 146, 137, 113, 101, 102, 79,
	0, 130, 91, 95, 90, 121, 143, 144, 89, 162,
	83, 154, 82, 84, 153, 120, 141, 147, 114, 111,
	81, 145, 112, 110, 103, 93, 98, 125, 109, 126,
	99, 117, 116, 118, 0, 0, 0, 136, 151, 163,
	122, 0, 157, 158, 159, 160, 119, 85, 100, 134,
	92, 0, 0, 0, 0, 105, 0, 107, 0, 0,
	135, 115, 0, 0, 0, 0, 0, 77, 0, 106,
	161, 129, 94, 152, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 178, 0, 0, 0, 0, 127,
	0, 0, 138, 97, 96, 104, 0, 0, 0, 88,
	0, 132, 123, 150, 0, 124, 131, 108, 142, 128,
	149, 179, 156, 140, 155, 78, 139, 148, 87, 133,
	80, 146, 137, 113, 101, 102, 79, 0, 130, 91,
	95, 90, 121, 143, 144, 89, 162, 83, 154, 82,
	84, 153, 120, 141, 147, 114, 111, 81, 145, 112,
	110, 103, 93, 98, 125, 109, 126, 99, 117, 116,
	118, 0, 0, 0, 136, 151, 163, 122, 0, 157,
	158, 159, 160, 119, 85, 100, 134, 92, 0, 0,
	0, 0, 105, 0, 107, 0, 0, 135, 115, 0,
	0, 0, 0, 0, 77, 0, 106, 161, 129, 94,
	152, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 127, 0, 0, 138,
	97, 96, 104, 0, 0, 0, 88, 0, 132, 123,
	150, 0, 124, 131, 108, 142, 128, 149, 179, 156,
	140, 155, 78, 139, 148, 87, 133, 80, 146, 137,
	113, 101, 102, 79, 0, 130, 91, 95, 90, 121,
	143, 144, 89, 162, 83, 154, 82, 84, 153, 120,
	141, 147, 114, 111, 81, 145, 112, 110, 103, 93,
	98, 125, 109, 126, 99, 117, 116, 118, 0, 0,
	0, 136, 151, 163, 122, 0, 157, 158, 159, 160,
	119, 85, 100, 134, 92, 0, 0, 0, 0, 105,
	0, 107, 0, 0, 135, 115, 0, 0, 0, 0,
	0, 77, 0, 106, 161, 129, 94, 152, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 127, 0, 0, 138, 97, 96, 104,
	0, 0, 0, 88, 0, 132, 123, 150, 0, 124,
	131, 108, 142, 128, 149, 179, 156, 140, 155, 78,
	139, 148, 87, 133, 80, 146, 137, 113, 101, 102,
	79, 0, 130, 91, 95, 90, 121, 143, 144, 89,
	162, 83, 154, 82, 84, 153, 120, 141, 147, 114,
	111, 81, 145, 112, 110, 103, 93, 98, 125, 109,
	126, 99, 117, 116, 118, 0, 0, 0, 136, 151,
	163, 122, 0, 157, 158, 159, 160, 119, 85, 100,
	134, 92, 0, 0, 0, 0, 105, 0, 107, 0,
	0, 135, 115, 0, 0, 0, 0, 0, 77, 0,
	106, 161, 129, 94, 152, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	127, 0, 0, 138, 97, 96, 104, 0, 0, 0,
	88, 0, 132, 123, 150, 0, 124, 131, 108, 142,
	128, 149, 179, 156, 140, 155, 78, 139, 148, 87,
	133, 80, 146, 137, 113, 101, 102, 79, 0, 130,
	91, 95, 90, 121, 143, 144, 89, 162, 83, 154,
	82, 84, 153, 120, 141, 147, 114, 111, 81, 145,
	112, 110, 103, 93, 98, 125, 109, 126, 99, 117,
	116, 118, 0, 0, 0, 136, 151, 163, 0, 0,
	157, 158, 159, 160, 119, 85, 100, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 106, 161, 129,
	94, 152,
}

var yyPact = [...]int{
	1598, -1000, -179, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 732, 782, -1000, -1000, -1000, -1000, -1000, -1000, 568,
	6476, 3, 36, -25, 8861, 34, 1387, 9422, -1000, -54,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 533, -1000, -1000,
	-1000, -1000, -1000, 731, 757, 559, 722, 658, -1000, 5213,
	2, 7901, 8674, 4562, -1000, 362, 30, 9422, -147, 9048,
	-3, -3, -3, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 32, 9422, -1000, 9422, -5, 358,
	-5, -5, -5, 9422, -1000, 67, -1000, -1000, -1000, -1000,
	9422, 356, 691, 35, 2917, 2917, 2917, 2917, -48, 2917,
	2917, 580, -1000, -1000, -1000, -1000, 2917, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 279, 696, 5653, 5653,
	732, -1000, 533, -1000, -1000, -1000, 687, -1000, -1000, 175,
	770, -1000, 2017, 66, -1000, 5653, 1870, 525, -1000, -1000,
	525, -1000, -1000, 56, -1000, -1000, 6077, 6077, 6077, 6077,
	6077, 6077, 6077, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 525, -1000, 5438,
	525, 525, 525, 525, 525, 525, 525, 525, 5653, 525,
	525, 525, 525, 525, 525, 525, 525, 525, 525, 525,
	525, 525, 8463, 486, 617, -1000, -1000, -1000, 716, 7119,
	7714, 9422, 487, -1000, 502, 4092, -1000, -1000, -1000, 125,
	7493, -1000, -1000, -1000, 685, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	424, -1000, 2227, 354, 2917, 8, 512, 351, 159, 332,
	9422, 9422, 2917, 6, 9422, 714, 579, 9422, 330, 317,
	-1000, 4327, -1000, 2917, 2917, 2917, 2917, 2917, 2917, 2917,
	2917, -1000, -1000, -1000, -1000, -1000, -1000, 2917, 2917, -1000,
	-1000, 9422, -1000, -1000, -1000, 726, 776, 88, 285, 64,
	506, -1000, 265, 731, 279, 658, 7306, 565, -1000, -1000,
	9422, -1000, 5653, 5653, 348, -1000, 8275, -1000, -1000, 3387,
	100, 6077, 204, 229, 6077, 6077, 6077, 6077, 6077, 6077,
	6077, 6077, 6077, 6077, 6077, 6077, 6077, 6077, 6077, 235,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 310, -1000,
	533, 627, 627, 75, 75, 75, 75, 75, 75, 6289,
	4783, 279, 422, 143, 5438, 5213, 5213, 5653, 5653, 9235,
	9235, 5213, 703, 132, 143, 9235, -1000, 279, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5213, 5213, 5213, 5213, -26,
	9422, -1000, 9235, 7901, 7901, 7901, 7901, 7901, -1000, 612,
	611, -1000, 654, 595, 660, 9422, -1000, 417, 7119, 73,
	525, -1000, 8088, -1000, -1000, -26, 481, 7901, 9422, -1000,
	-1000, 4092, 502, 5653, 69, -1000, -1000, -1000, -1000, 2682,
	196, 145, -114, -1000, -1000, -1000, 527, -1000, 527, 527,
	527, 527, -87, -87, -87, -87, -1000, -1000, -1000, -1000,
	-1000, 566, 560, -1000, 527, 527, 527, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 556, 556, 556, 529, 529, 519, -1000,
	9422, -167, 308, 2917, 713, 2917, -1000, 106, -1000, 9422,
	-1000, -1000, 9422, 2917, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5653, -1000, 665, 5653, 5653, 3857, 5653, -1000, -1000,
	-1000, 696, -1000, 703, 730, -1000, 679, 678, 5213, -1000,
	-1000, 100, 131, -1000, -1000, 325, -1000, -1000, -1000, -1000,
	60, 525, -1000, 2023, -1000, -1000, -1000, -1000, 204, 6077,
	6077, 6077, 392, 2023, 1969, 576, 663, 75, 352, 352,
	96, 96, 96, 96, 96, 343, 343, -1000, -1000, -1000,
	279, -1000, -1000, -1000, 279, 5213, 499, -1000, -1000, 5653,
	-1000, 279, 415, 415, 274, 319, 521, -1000, 59, 518,
	415, 5213, 168, -1000, 5653, 279, -1000, 415, 279, 415,
	415, 528, 525, -1000, 513, -1000, 124, 617, 554, 577,
	1074, -1000, -1000, -1000, -1000, 603, -1000, 586, -1000, -1000,
	-1000, -1000, -1000, 14, 12, 11, 9048, -1000, 765, 7901,
	463, -1000, -1000, 143, -1000, 291, 498, 2447, -1000, -1000,
	-1000, -1000, -1000, -1000, 540, 702, 105, 108, 286, -1000,
	-1000, 694, -1000, 165, -119, -1000, -1000, 237, -87, -87,
	-1000, -1000, 69, 661, 69, 69, 69, 255, 255, -1000,
	-1000, -1000, -1000, 228, -1000, -1000, -1000, 223, -1000, 575,
	9048, 2917, -1000, 3622, -1000, -1000, -1000, -1000, -1000, -1000,
	271, 181, 172, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -27, -1000, 2917, -1000, 143, 645,
	143, 143, 51, -1000, -1000, 9422, -1000, -1000, -1000, -1000,
	511, -1000, -1000, -1000, 3152, 5213, -1000, 392, 2023, 409,
	-1000, 6077, 6077, -1000, -1000, 415, 5213, 143, -1000, -1000,
	-1000, -9, 235, -9, 6077, 6077, 3857, 6077, 6077, -157,
	484, 127, -1000, 5653, 300, -1000, -1000, -1000, -1000, -1000,
	571, 9235, 525, -1000, 6908, 9048, 732, 9235, 5653, 5653,
	-1000, -1000, 5653, 536, -1000, 5653, -1000, -1000, -1000, 525,
	525, 525, 378, -1000, 732, 463, -1000, -1000, 2682, -1000,
	2682, 9048, -1000, 281, 268, -1000, -1000, 523, 19, -1000,
	-1000, -1000, 401, 69, 69, -1000, 121, -1000, -1000, -1000,
	411, -1000, 406, 497, 404, 9422, -1000, -1000, 495, -1000,
	119, -1000, -1000, 9048, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 9048, 9422, -1000, -1000,
	-1000, -1000, -1000, 9048, -1000, -1000, 3622, -1000, 767, 7901,
	-1000, -1000, 279, -1000, 6077, 2023, 2023, -1000, -1000, 279,
	527, 527, -1000, 527, 529, -1000, 527, -63, 527, -64,
	279, 279, 1768, 1925, -1000, 1703, 1752, 525, -154, -1000,
	143, 5653, -1000, 705, 464, 480, -1000, -1000, 4998, 279,
	380, 49, 378, 731, -1000, 143, 143, 143, 9048, 143,
	9048, 9048, 9048, 6697, 9048, 731, -1000, 2447, -1000, 376,
	-1000, 527, -1000, -1000, -110, 775, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -87, 246, -87,
	195, -1000, 192, 2917, 3622, 2682, -1000, 526, -1000, -1000,
	-1000, -1000, 707, 765, 5653, 482, -1000, 2023, -1000, -1000,
	45, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	6077, 6077, -1000, 6077, 6077, 6077, 279, 242, 143, 701,
	-1000, 525, -1000, -1000, 517, 9048, 9048, -1000, -1000, 350,
	-1000, 321, 321, 321, 73, -1000, -1000, 65, 9048, -1000,
	90, -1000, -133, 69, -1000, 69, 391, 366, -1000, -1000,
	-1000, 9048, 525, 763, 143, -1000, -1000, 1543, 1543, 1543,
	1543, 47, -1000, -1000, 774, -1000, 525, -1000, 533, 48,
	-1000, 9048, -1000, -1000, -1000, -1000, -1000, 65, -1000, 264,
	111, 240, -1000, 173, 698, -1000, 697, -1000, -1000, -1000,
	-1000, -1000, 296, -28, 761, 751, -1000, -1000, -1000, -1000,
	279, 21, -170, 9235, 480, 279, 9048, -1000, -1000, -1000,
	184, -1000, -1000, -1000, 197, -1000, -1000, 512, 278, -1000,
	9048, -1000, 5653, 5653, -1000, 625, -165, -173, 474, -1000,
	-1000, -1000, -1000, -167, -1000, -28, 673, 143, 413, -1000,
	616, -1000, -1000, -1000, -38, -168, -41, -171, 525, -174,
	5865, -1000, 1543, 279, -1000, -1000,
}

var yyPgo = [...]int{
	0, 980, 34, 564, 979, 978, 974, 967, 966, 965,
	963, 961, 960, 959, 957, 953, 952, 948, 947, 946,
	945, 944, 943, 941, 85, 940, 936, 935, 52, 934,
	58, 929, 928, 26, 521, 41, 29, 107, 927, 22,
	50, 94, 922, 36, 921, 911, 59, 910, 51, 909,
	908, 1418, 907, 906, 9, 14, 905, 903, 902, 901,
	54, 410, 900, 884, 883, 881, 880, 879, 37, 6,
	11, 10, 13, 878, 751, 7, 877, 39, 876, 874,
	871, 870, 38, 869, 43, 867, 30, 863, 861, 40,
	859, 18, 53, 21, 16, 8, 60, 858, 24, 45,
	856, 350, 855, 115, 297, 854, 853, 851, 849, 27,
	174, 637, 618, 57, 848, 847, 846, 1373, 55, 47,
	23, 845, 28, 912, 25, 844, 843, 32, 842, 841,
	838, 836, 835, 833, 831, 380, 830, 829, 826, 63,
	49, 821, 820, 44, 17, 819, 816, 815, 31, 46,
	812, 42, 811, 809, 807, 806, 19, 15, 804, 12,
	800, 5, 799, 798, 2, 796, 20, 794, 3, 792,
	4, 33, 791, 790, 0, 243, 789, 788, 109,
}

var yyR1 = [...]int{
	0, 172, 173, 173, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 176,
	176, 46, 46, 92, 92, 10, 10, 125, 125, 11,
	11, 11, 11, 11, 11, 11, 170, 170, 169, 168,
	168, 167, 167, 166, 16, 153, 154, 154, 154, 149,
	128, 128, 128, 128, 131, 131, 129, 129, 129, 129,
	129, 129, 129, 130, 130, 130, 130, 130, 132, 132,
	132, 132, 132, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 134, 134,
	134, 134, 134, 134, 134, 134, 148, 148, 135, 135,
	143, 143, 144, 144, 144, 141, 141, 142, 142, 145,
	145, 145, 136, 136, 136, 136, 136, 136, 136, 138,
	138, 146, 146, 139, 139, 139, 140, 140, 147, 147,
	147, 147, 147, 137, 137, 150, 150, 162, 162, 161,
	161, 161, 152, 152, 158, 158, 158, 158, 158, 151,
	151, 160, 160, 159, 155, 155, 155, 156, 156, 156,
	157, 157, 157, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 165, 163, 163, 164, 164, 13, 14,
	14, 14, 14, 14, 15, 15, 17, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	126, 126, 126, 19, 19, 21, 21, 22, 23, 20,
	20, 20, 20, 20, 177, 24, 25, 25, 26, 26,
	26, 30, 30, 30, 28, 28, 29, 29, 35, 35,
	34, 34, 36, 36, 36, 36, 114, 114, 114, 113,
	113, 38, 38, 39, 39, 40, 40, 41, 41, 41,
	53, 53, 91, 91, 93, 93, 42, 42, 42, 42,
	43, 43, 44, 44, 45, 45, 121, 121, 120, 120,
	120, 119, 119, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	102, 102, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	64, 64, 178, 178, 66, 66, 66, 66, 31, 31,
	31, 31, 31, 124, 124, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 78, 78,
	32, 32, 76, 76, 77, 79, 79, 75, 75, 75,
	60, 60, 60, 60, 60, 60, 60, 60, 62, 62,
	62, 80, 80, 81, 81, 82, 82, 83, 83, 84,
	85, 85, 85, 86, 86, 86, 86, 87, 87, 88,
	88, 89, 89, 89, 59, 59, 59, 59, 59, 59,
	90, 90, 90, 90, 94, 94, 70, 70, 72, 72,
	71, 73, 95, 95, 98, 96, 96, 99, 99, 97,
	97, 97, 116, 116, 116, 100, 100, 103, 103, 104,
	104, 101, 101, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 106, 106, 106, 107, 107, 108, 108,
	108, 115, 115, 111, 111, 112, 112, 117, 117, 118,
	118, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 174, 175, 122, 123, 123, 123,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 5, 6, 7, 5, 11, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 1, 1, 2,
	8, 4, 6, 5, 5, 5, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 1, 3, 3, 8,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 2, 2, 2, 2, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 3, 4, 2, 4, 2, 2, 2, 2, 3,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 0,
	2, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -172, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 32, -16,
	114, 115, 117, 116, 142, 118, 135, 51, 154, 155,
	157, 158, 27, 136, 137, 140, 141, -174, 8, 225,
	55, -173, 240, -82, 16, -26, 5, -24, -177, -24,
	-24, -24, -24, -24, -153, 55, -108, 123, 72, 150,
	217, 120, 121, 127, -111, 58, -110, 233, 154, 165,
	159, 186, 178, 176, 179, 213, 67, 157, 138, 174,
	170, 168, 29, 191, 238, 169, 133, 132, 192, 196,
	214, 163, 164, 190, 134, 34, 235, 36, 146, 194,
	189, 185, 188, 162, 184, 40, 198, 197, 199, 212,
	181, 171, 19, 141, 144, 193, 195, 128, 148, 237,
	167, 145, 140, 158, 215, 39, 203, 161, 131, 155,
	152, 182, 147, 172, 173, 187, 160, 183, 156, 149,
	142, 204, 239, 180, 177, 153, 151, 208, 209, 210,
	211, 236, 175, 205, -101, 123, 125, 121, 121, 122,
	123, 217, 120, 121, -51, -117, 58, -110, 123, 150,
	121, 108, 179, 114, 206, 122, 34, 148, -126, 121,
	207, 151, 208, 209, 210, 211, 58, 215, 214, -117,
	156, -122, -122, -122, -122, -122, -2, -86, 18, 17,
	-5, -3, -174, 6, 22, 23, -30, 41, 42, -25,
	-36, 99, -37, -117, -56, 74, -61, 31, 58, -110,
	25, -60, -57, -75, -73, -74, 108, 109, 97, 98,
	105, 75, 110, -65, -63, -64, -66, 60, 59, 68,
	61, 62, 63, 64, 69, 70, 71, -111, -71, -174,
	45, 46, 226, 227, 228, 229, 232, 230, 77, 35,
	216, 224, 223, 222, 220, 221, 218, 219, 126, 217,
	103, 225, -101, -39, -40, -41, -42, -53, -74, -174,
	-51, 11, -46, -51, -96, -125, -99, 215, 214, -112,
	-97, -111, -109, 213, 179, 212, 119, 73, 24, 26,
	201, 76, 108, 17, 77, 107, 226, 114, 49, 218,
	219, 216, 228, 229, 217, 206, 31, 10, 27, 136,
	23, 101, 116, 80, 81, 139, 25, 137, 71, 20,
	52, 11, 14, 15, 126, 125, 92, 122, 47, 8,
	110, 28, 89, 43, 30, 45, 90, 18, 12, 21,
	220, 221, 33, 232, 143, 103, 50, 37, 74, 69,
	53, 72, 16, 48, 91, 117, 225, 46, 120, 6,
	231, 32, 135, 44, 121, 207, 79, 124, 70, 5,
	127, 9, 51, 54, 222, 223, 224, 35, 78, 13,
	-154, -149, 58, 122, -51, 225, -111, -104, 126, -104,
	-104, 121, -51, -51, -103, 126, 58, -103, -103, -103,
	-51, 111, -51, 58, 32, 217, 58, 148, 121, 149,
	123, -123, -174, -112, -123, -123, -123, 152, 153, -123,
	-123, 53, -123, -175, 57, -89, 20, 33, -37, -117,
	-83, -84, -37, -82, -2, -24, 37, -28, 23, 66,
	11, -114, 73, 72, 89, -113, 24, -111, 60, 111,
	-37, -58, 92, 74, 90, 91, 76, 94, 93, 104,
	97, 98, 99, 100, 101, 102, 103, 95, 96, 107,
	82, 83, 84, 85, 86, 87, 88, -102, -174, -74,
	-174, 112, 113, -61, -61, -61, -61, -61, -61, -61,
	-174, -2, -69, -37, -174, -174, -174, -174, -174, -174,
	-174, -174, -174, -78, -37, -174, -178, -174, -178, -178,
	-178, -178, -178, -178, -178, -174, -174, -174, -174, -52,
	28, -51, 32, 56, -47, -49, -48, -50, 43, 47,
	49, 44, 45, 46, 50, -121, 24, -39, -174, -120,
	144, -119, 24, -117, 60, -51, -46, -176, 56, 11,
	54, 56, -96, 82, -116, -111, 60, 31, 32, 57,
	56, -128, -131, -133, -132, -134, -129, -130, 176, 177,
	108, 180, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 32, 138, 172, 173, 174, 175, 192, 193,
	194, 195, 196, 197, 198, 199, 159, 160, 161, 162,
	163, 164, 165, 167, 168, 169, 170, 171, 58, -123,
	123, -170, 54, 58, 74, 58, -51, -51, -123, 124,
	-51, 25, 53, -51, 58, 58, -118, -117, -109, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, -51,
	-88, 21, 9, 92, 56, 19, 111, 56, -85, 26,
	27, -86, -175, -30, -62, -111, 61, 64, -29, 44,
	-51, -37, -37, -67, 69, 74, 70, 71, -113, 99,
	-118, -112, -109, -61, -68, -71, -74, 65, 92, 90,
	91, 76, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -124, 58, 60,
	58, -60, -60, -111, -35, 23, -34, -36, -175, 56,
	-175, -2, -34, -34, -37, -37, -75, -111, -117, -75,
	-34, -28, -76, -77, 78, -75, -175, -34, -35, -34,
	-34, -92, 144, -51, -95, -98, -75, -40, -41, -41,
	-40, -41, 43, 43, 43, 48, 43, 48, 43, -48,
	-117, -175, -54, 51, 125, 52, -174, -119, -92, 54,
	-39, -51, -99, -37, -140, 107, -155, -156, -157, -112,
	60, 61, -149, -150, -158, 128, 131, 127, -151, 122,
	30, -145, 69, 74, -141, 204, -135, 55, -135, -135,
	-135, -135, -139, 179, -139, -139, -139, 55, 55, -135,
	-135, -135, -143, 55, -143, -143, -144, 55, -144, -115,
	54, -51, -168, 236, -169, 58, -123, 25, -123, -105,
	119, 116, 117, -165, 115, 201, 179, 67, 31, 16,
	226, 144, 239, 58, 145, -51, -51, -123, -37, 39,
	-37, -37, -118, -84, -89, -100, 20, 11, 35, 35,
	-34, 69, 70, 71, 111, -174, -68, -61, -61, -61,
	-33, 139, 73, -175, -175, -34, 56, -37, -175, -175,
	-175, 56, 54, 24, 56, 11, 111, 56, 11, -175,
	-34, -79, -77, 80, -37, -175, -175, -175, -175, -175,
	-59, 32, 35, -2, -174, -174, -55, 56, 13, 82,
	-44, -43, 53, 54, -45, 53, -43, 43, 43, 122,
	122, 122, -93, -111, -55, -39, -55, 58, 56, -157,
	82, 55, 30, -151, -151, 58, 58, -136, 31, 69,
	-142, 205, 61, -139, -139, -140, 32, -140, -140, -140,
	-148, 60, -148, 61, 61, 53, -111, -123, -167, -166,
	-112, -122, -171, 150, 129, 130, 133, 132, 58, 122,
	30, 128, 131, 144, 127, -171, 150, -106, -107, 124,
	24, 122, 30, 144, -123, 40, 111, -51, -38, 11,
	99, -112, -35, -33, 73, -61, -61, -175, -36, -127,
	108, 176, 138, 174, 170, 190, 181, 203, 172, 204,
	-124, -127, -61, -61, -112, -61, -61, 233, -82, 81,
	-37, 79, -94, 53, -95, -70, -72, -71, -174, -2,
	-90, -111, -93, -82, -98, -37, -37, -37, 55, -37,
	-174, -174, -174, -175, 56, -82, -55, -156, -157, -160,
	-159, -111, 58, 58, -138, 53, 60, 61, 62, 69,
	216, 68, 57, -140, -140, 58, 108, 57, 56, 57,
	56, 57, 56, -51, 56, 82, -122, -111, -122, -111,
	-51, -122, -111, -87, 12, -39, -175, -61, -175, -135,
	-135, -135, -144, -135, 164, -135, 164, -175, -175, -175,
	56, 20, -175, 56, 20, -174, -32, 231, -37, 29,
	-94, 56, -175, -175, -175, 56, 111, -175, -86, -91,
	-111, -91, -91, -91, -120, -111, -86, 57, 56, -135,
	-146, 201, 9, -139, 60, -139, 61, 61, -123, -166,
	-157, 55, 28, -55, -37, -139, 58, -61, -61, -61,
	-61, -61, -175, 60, 30, -72, 35, -2, -174, -111,
	-111, 56, 57, -175, -175, -175, -54, -162, -161, 54,
	134, 67, -159, -147, 128, 30, 127, 216, -140, -140,
	57, 57, -91, -174, -80, 14, -175, -175, -175, -175,
	-31, 92, 236, 9, -70, -2, 111, -111, -161, 58,
	-152, 82, 60, -137, 67, 30, 30, 57, -163, -164,
	144, -81, 15, 17, -175, 234, 50, 237, -95, -175,
	-111, 61, 60, -170, -175, 56, -111, -37, -69, 40,
	235, 238, -168, -164, 35, 40, 146, 236, 147, 237,
	-174, 238, -61, 143, -175, -175,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 485, 0, 254, 254, 254, 254, 254, 254, 0,
	558, 541, 0, 0, 0, 0, 240, 244, 245, 0,
	247, 248, 756, 756, 756, 756, 756, 0, 33, 34,
	754, 1, 3, 493, 0, 0, 258, 261, 256, 0,
	541, 0, 0, 0, 49, 0, 0, 744, 0, 745,
	539, 539, 539, 559, 560, 563, 564, 665, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 746, 747, 748, 749,
	750, 751, 752, 753, 0, 0, 542, 0, 537, 0,
	537, 537, 537, 0, 215, 325, 567, 568, 744, 745,
	0, 0, 0, 0, 757, 757, 757, 757, 0, 757,
	757, 233, 235, 236, 237, 238, 757, 241, 242, 243,
	246, 249, 250, 251, 252, 253, 27, 501, 0, 0,
	485, 29, 0, 254, 259, 260, 264, 262, 263, 255,
	0, 272, 276, 0, 333, 0, 338, 340, -2, -2,
	0, 375, 376, 377, 378, 379, 0, 0, 0, 0,
	0, 0, 0, 402, 403, 404, 405, 470, 471, 472,
	473, 474, 475, 476, 477, 342, 343, 467, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 458, 0,
	432, 432, 432, 432, 432, 432, 432, 432, 0, 0,
	0, 0, 0, 0, 283, 285, 286, 287, 306, 0,
	308, 0, 0, 41, 45, 0, 525, -2, -2, 0,
	0, 565, 566, -2, 672, -2, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	0, 66, 0, 0, 757, 0, 56, 0, 0, 0,
	0, 0, 757, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 216, 757, 757, 757, 757, 757, 757, 757,
	757, 225, 758, 759, 226, 227, 228, 757, 757, 230,
	231, 0, 239, 28, 755, 499, 0, 0, 494, 0,
	486, 487, 490, 493, 27, 261, 0, 266, 265, 257,
	0, 273, 0, 0, 0, 277, 0, 279, 280, 0,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 361, 362, 363, 364, 365, 366, 339, 0, 353,
	0, 0, 0, 395, 396, 397, 398, 399, 400, 0,
	268, 27, 0, 373, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 0, 459, 0, 424, 0, 425, 426,
	427, 428, 429, 430, 431, 0, 268, 0, 0, 43,
	0, 324, 0, 0, 0, 0, 0, 0, 313, 0,
	0, 316, 0, 0, 0, 0, 307, 0, 0, 327,
	712, 309, 0, 311, 312, -2, 0, 0, 0, 39,
	40, 0, 46, 0, 146, 532, 533, 534, 530, 174,
	0, 129, 125, 71, 72, 73, 118, 75, 118, 118,
	118, 118, 143, 143, 143, 143, 101, 102, 103, 104,
	105, 0, 0, 88, 118, 118, 118, 92, 108, 109,
	110, 111, 112, 113, 114, 115, 76, 77, 78, 79,
	80, 81, 82, 120, 120, 120, 122, 122, 561, 51,
	0, 59, 0, 757, 0, 757, 64, 0, 190, 0,
	209, 538, 0, 757, 212, 213, 326, 569, 570, 217,
	218, 219, 220, 221, 222, 223, 224, 229, 232, 234,
	22, 0, 502, 0, 0, 0, 0, 0, 489, 491,
	492, 501, 30, 264, 0, 478, 0, 0, 0, 267,
	25, 334, 335, 337, 354, 0, 356, 358, 278, 274,
	0, 468, -2, 344, 345, 369, 370, 371, 0, 0,
	0, 0, 367, 349, 0, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 394, 443, 444,
	0, 392, 393, 401, 0, 0, 269, 270, 372, 0,
	520, 27, 0, 0, 0, 0, 0, 467, 0, 0,
	0, 0, 465, 462, 0, 0, 433, 0, 0, 0,
	0, 0, 0, 323, 331, 522, 0, 284, 302, 304,
	0, 299, 314, 315, 317, 0, 319, 0, 321, 322,
	288, 289, 290, 0, 0, 0, 0, 310, 331, 0,
	331, 42, 526, 527, 528, 0, 65, 175, 177, 180,
	181, 182, 67, 68, 0, 0, 0, 0, 0, 169,
	170, 132, 130, 0, 127, 126, 74, 0, 143, 143,
	95, 96, 146, 0, 146, 146, 146, 0, 0, 89,
	90, 91, 83, 0, 84, 85, 86, 0, 87, 0,
	0, 757, 53, 0, 57, 58, 54, 540, 55, 756,
	0, 0, 553, 191, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 0, 208, 757, 211, 500, 0,
	495, 496, 0, 488, 23, 0, 535, 536, 479, 480,
	281, 355, 357, 359, 0, 268, 346, 367, 350, 0,
	347, 0, 0, 341, 406, 0, 0, 374, -2, 409,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	485, 0, 463, 0, 0, 423, 434, 435, 436, 437,
	514, 0, 0, -2, 0, 0, 485, 0, 0, 0,
	296, 303, 0, 0, 297, 0, 298, 318, 320, 0,
	0, 0, 0, 294, 485, 331, 38, 147, 0, 178,
	0, 0, 164, 0, 0, 167, 168, 139, 0, 131,
	70, 128, 0, 146, 146, 97, 0, 98, 99, 100,
	0, 116, 0, 0, 0, 0, 562, 52, 60, 61,
	0, 183, 756, 0, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 756, 0, 0, 756, 554,
	555, 556, 557, 0, 210, 503, 0, 24, 497, 0,
	275, 469, 0, 348, 0, 368, 351, 407, 271, 0,
	118, 118, 448, 118, 122, 451, 118, 453, 118, 456,
	0, 0, 0, 0, 468, 0, 0, 0, 460, 422,
	466, 0, 31, 0, 514, 504, 516, 518, 0, 27,
	0, 510, 0, 493, 523, 332, 524, 300, 0, 305,
	0, 0, 0, 308, 0, 493, 37, 176, 179, 0,
	171, 118, 165, 166, 141, 0, 133, 134, 135, 136,
	137, 138, 119, 93, 94, 144, 145, 143, 0, 143,
	0, 123, 0, 757, 0, 0, 184, 0, 185, 187,
	188, 189, 0, 331, 0, 282, 408, 352, 411, 445,
	143, 449, 450, 452, 454, 455, 457, 413, 412, 414,
	0, 0, 417, 0, 0, 0, 0, 0, 464, 0,
	32, 0, 519, -2, 0, 0, 0, 44, 35, 0,
	292, 0, 0, 0, 327, 295, 36, 156, 0, 173,
	148, 142, 0, 146, 117, 146, 0, 0, 50, 62,
	63, 0, 0, 481, 498, 446, 447, 0, 0, 0,
	0, 438, 421, 461, 0, 517, 0, -2, 0, 512,
	511, 0, 301, 328, 329, 330, 291, 155, 157, 0,
	162, 0, 172, 153, 0, 150, 152, 140, 106, 107,
	121, 124, 0, 0, 483, 0, 415, 416, 418, 419,
	0, 0, 0, 0, 507, 27, 0, 293, 158, 159,
	0, 163, 161, 69, 0, 149, 151, 56, 0, 204,
	0, 26, 0, 0, 420, 0, 0, 0, 515, -2,
	513, 160, 154, 59, 203, 0, 0, 484, 482, 439,
	0, 442, 186, 205, 0, 440, 0, 0, 0, 0,
	0, 441, 0, 0, 206, 207,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	55, 57, 99, 97, 56, 98, 111, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 240,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:303
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:308
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:309
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:313
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:336
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			sel.FormatType = yyDollar[5].format
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:345
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:349
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:355
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:362
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Sample: yyDollar[8].sample, Where: NewWhere(WhereStr, yyDollar[9].expr), GroupBy: GroupBy(yyDollar[10].exprs), Having: NewWhere(HavingStr, yyDollar[11].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:368
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:372
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:378
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:382
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:389
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:401
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:413
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:417
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:423
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:429
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:433
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:451
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:456
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:460
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:466
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:470
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:476
		{
			yyVAL.str = SessionStr
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:480
		{
			yyVAL.str = GlobalStr
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:486
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:491
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:496
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:500
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:504
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:512
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:516
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:521
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:525
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:531
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:536
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:541
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:552
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:558
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:564
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:571
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:583
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:587
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:593
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:604
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:615
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:620
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:662
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:674
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:692
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:807
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:812
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:817
		{
			yyVAL.optVal = nil
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:826
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:830
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:838
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:842
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:848
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:856
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:865
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:875
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:883
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:888
		{
			yyVAL.optVal = nil
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:892
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:896
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:900
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:904
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:908
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:912
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:917
		{
			yyVAL.optVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:921
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:926
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:930
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:935
		{
			yyVAL.str = ""
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:939
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:943
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:948
		{
			yyVAL.str = ""
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:952
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:957
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:961
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:965
		{
			yyVAL.colKeyOpt = colKey
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:969
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:973
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:978
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:982
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:988
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:992
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:998
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1002
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1008
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1012
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1023
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1027
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1033
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1037
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1041
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1045
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1049
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1055
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1059
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1065
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1069
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1075
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1080
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1088
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1096
		{
			yyVAL.str = yyDollar[1].str
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1100
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1104
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1110
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1124
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1128
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1132
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 186:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1136
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 187:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1149
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1159
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 189:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1164
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1169
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1173
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1192
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1202
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 206:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1208
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1212
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1218
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1224
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 210:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1232
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1237
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1245
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1249
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1255
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1259
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1264
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1270
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1274
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1278
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1283
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1287
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1291
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1295
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1299
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1303
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1307
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1311
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1315
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1319
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1323
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1327
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1331
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1335
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1339
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1343
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1347
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1351
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1371
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1375
		{
			yyVAL.str = SessionStr
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1379
		{
			yyVAL.str = GlobalStr
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1385
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &Begin{}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &Begin{}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &Commit{}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1411
		{
			yyVAL.statement = &Rollback{}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1417
		{
			yyVAL.statement = &OtherRead{}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = &OtherRead{}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &OtherRead{}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1438
		{
			setAllowComments(yylex, true)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1442
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1448
		{
			yyVAL.bytes2 = nil
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1452
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1458
		{
			yyVAL.str = UnionStr
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1462
		{
			yyVAL.str = UnionAllStr
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1466
		{
			yyVAL.str = UnionDistinctStr
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1471
		{
			yyVAL.str = ""
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1479
		{
			yyVAL.str = SQLCacheStr
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1484
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1488
		{
			yyVAL.str = DistinctStr
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1493
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1497
		{
			yyVAL.str = StraightJoinHint
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1502
		{
			yyVAL.selectExprs = nil
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1506
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1512
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1516
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1522
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1526
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1530
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1534
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1539
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1543
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1547
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1554
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1559
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1563
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1569
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1573
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1583
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1587
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1591
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1597
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1601
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1607
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1611
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1617
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1621
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1634
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1638
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1642
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1646
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1652
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1654
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1658
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1660
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1664
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1669
		{
			yyVAL.empty = struct{}{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1671
		{
			yyVAL.empty = struct{}{}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1674
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1678
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1682
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1689
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1695
		{
			yyVAL.str = JoinStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = JoinStr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1703
		{
			yyVAL.str = JoinStr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = StraightJoinStr
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1715
		{
			yyVAL.str = LeftJoinStr
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1719
		{
			yyVAL.str = LeftJoinStr
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1723
		{
			yyVAL.str = RightJoinStr
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1727
		{
			yyVAL.str = RightJoinStr
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1733
		{
			yyVAL.str = NaturalJoinStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1737
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1747
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1751
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1757
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1766
		{
			yyVAL.indexHints = nil
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1770
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1774
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1778
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1783
		{
			yyVAL.expr = nil
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1787
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1793
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1797
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1801
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1805
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1809
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1813
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1817
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1823
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1827
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1837
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1843
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1847
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1851
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1855
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 348:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1859
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1863
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1867
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1871
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1875
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1879
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1885
		{
			yyVAL.str = IsNullStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1889
		{
			yyVAL.str = IsNotNullStr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1893
		{
			yyVAL.str = IsTrueStr
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1897
		{
			yyVAL.str = IsNotTrueStr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.str = IsFalseStr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1905
		{
			yyVAL.str = IsNotFalseStr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.str = EqualStr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1915
		{
			yyVAL.str = LessThanStr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1919
		{
			yyVAL.str = GreaterThanStr
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1923
		{
			yyVAL.str = LessEqualStr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.str = GreaterEqualStr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.str = NotEqualStr
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1935
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1940
		{
			yyVAL.expr = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1944
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1950
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1964
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1974
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1980
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1984
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1988
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1992
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1996
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2000
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2004
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2008
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2012
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2016
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2020
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2024
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2028
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2032
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2036
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2040
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2044
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2048
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2052
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2056
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2060
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2064
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2068
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2076
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2090
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2094
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2098
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2116
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2120
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 408:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2124
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2134
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2138
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 411:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2142
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2146
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 413:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2150
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 414:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2154
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 415:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2158
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 416:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2162
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2166
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 418:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2170
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 419:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2174
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 420:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2178
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2182
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2186
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2190
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2212
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2217
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2227
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2264
		{
			yyVAL.str = ""
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2268
		{
			yyVAL.str = BooleanModeStr
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2272
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2276
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2280
		{
			yyVAL.str = QueryExpansionStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2296
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2304
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2308
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2312
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2316
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2322
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2326
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2330
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2334
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2338
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2342
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2346
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2351
		{
			yyVAL.expr = nil
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2360
		{
			yyVAL.str = string("")
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2364
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2370
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2374
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2380
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2385
		{
			yyVAL.expr = nil
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2389
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2395
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2403
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2413
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &NullVal{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2443
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2461
		{
			yyVAL.exprs = nil
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = nil
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2479
		{
			yyVAL.orderBy = nil
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2483
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2489
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2493
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2504
		{
			yyVAL.str = AscScr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2508
		{
			yyVAL.str = AscScr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2512
		{
			yyVAL.str = DescScr
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2517
		{
			yyVAL.limit = nil
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2521
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2525
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2529
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2534
		{
			yyVAL.sample = nil
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2538
		{
			yyVAL.sample = &Sample{Value: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2543
		{
			yyVAL.format = nil
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2547
		{
			yyVAL.format = &FormatType{Value: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2552
		{
			yyVAL.str = ""
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2556
		{
			yyVAL.str = ForUpdateStr
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2560
		{
			yyVAL.str = ShareModeStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2577
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2581
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2586
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2590
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 509:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2594
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2601
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2605
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2609
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2613
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2618
		{
			yyVAL.updateExprs = nil
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2622
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2628
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2632
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2638
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2642
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2654
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2664
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2674
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2680
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2684
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2694
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2701
		{
			yyVAL.bytes = []byte("charset")
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = &Default{}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2725
		{
			yyVAL.byt = 0
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2727
		{
			yyVAL.byt = 1
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2730
		{
			yyVAL.empty = struct{}{}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			yyVAL.empty = struct{}{}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2735
		{
			yyVAL.str = ""
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.str = IgnoreStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2741
		{
			yyVAL.empty = struct{}{}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			yyVAL.empty = struct{}{}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			yyVAL.empty = struct{}{}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2747
		{
			yyVAL.empty = struct{}{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.empty = struct{}{}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2751
		{
			yyVAL.empty = struct{}{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2753
		{
			yyVAL.empty = struct{}{}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2755
		{
			yyVAL.empty = struct{}{}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2757
		{
			yyVAL.empty = struct{}{}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2759
		{
			yyVAL.empty = struct{}{}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2762
		{
			yyVAL.empty = struct{}{}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2764
		{
			yyVAL.empty = struct{}{}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2766
		{
			yyVAL.empty = struct{}{}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.empty = struct{}{}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2772
		{
			yyVAL.empty = struct{}{}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2775
		{
			yyVAL.empty = struct{}{}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			yyVAL.empty = struct{}{}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2779
		{
			yyVAL.empty = struct{}{}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2782
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2784
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2788
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2799
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			decNesting(yylex)
		}
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3039
		{
			forceEOF(yylex)
		}
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3044
		{
			forceEOF(yylex)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3048
		{
			forceEOF(yylex)
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3052
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
